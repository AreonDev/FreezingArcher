#version 410

//Struct definition
struct LightDefinition
{
        vec4 LightPosition;
        vec4 LightDirection;
        vec4 LightColor;
};

//Input
layout(location = 1) in vec2 texcoord; // texture coordinate

//Output
layout(location = 0) out vec4 resulting_color;

//Sampler textures
uniform sampler2D TextureNormal;
uniform sampler2D TextureDiffuse;
uniform sampler2D TextureSpecular;
uniform sampler2D TexturePosition;

//Camera Position
uniform vec3 CameraPosition;

/*
layout(std430, binding = 15) buffer LightBuffer
{
        LightDefinition Lights[];       
}*/

void main ()
{
        vec4 image = texture2D(TextureDiffuse, texcoord);
        vec4 position = texture2D(TexturePosition, texcoord);
        vec4 normal = texture2D(TextureNormal,  texcoord);

        //hard coded life
        vec3 light = vec3(10, 10, 10);
        vec3 lightDir = light - position.xyz; //?

        normal = normalize(normal);
        lightDir = normalize(lightDir);

        vec3 eyeDir = normalize(CameraPosition-position.xyz);
        vec3 vHalfVector = normalize(lightDir.xyz - eyeDir);

        resulting_color = max(dot(normal.xyz, lightDir), 0) * image + 
                pow(max(dot(normal.xyz, vHalfVector), 0.0), 100) * 1.5;
}