#version 410

const int LIGHT_SOURCES_COUNT = 30;
const float LOG2 = 1.442695;

//Input
layout(location = 1) in vec2 texcoord; // texture coordinate

//Output
layout(location = 0) out vec4 resulting_color;
layout(location = 1) out vec4 other1;
layout(location = 2) out vec4 other2;
layout(location = 3) out vec4 other3;
layout(location = 4) out vec4 other4;

//Sampler textures
uniform sampler2D TextureNormal;
uniform sampler2D TextureDiffuse;
uniform sampler2D TextureSpecular;
uniform sampler2D TexturePosition;

//Camera Position
uniform vec3 CameraPosition;

//Lights
struct LightDefinition
{
        int Type;

        int On;

        vec4 LightColor;

        vec3 DirectionalLightDirection;

        vec3 PointLightPosition;
        float PointLightConstantAtt;
        float PointLightLinearAtt;
        float PointLightExpAtt;

        float SpotLightConeAngle;
        float SpotLightConeCosine;
};

uniform LightDefinition Lights[LIGHT_SOURCES_COUNT];

uniform vec4 AmbientColor;
uniform float AmbientIntensity;

uniform float DistanceFogIntensity;
uniform vec4  DistanceFogColor;

void main ()
{
        vec4 image = texture(TextureDiffuse, texcoord);
        vec4 position = texture(TexturePosition, texcoord);
        vec4 normal = texture(TextureNormal,  texcoord);
        vec4 specular = texture(TextureSpecular, texcoord);

        resulting_color = vec4(image.rgb, 1.0);

        other1 = vec4(0.0, 0.0, 0.0, 0.0);
        other2 = vec4(0.0, 0.0, 0.0, 0.0);
        other3 = vec4(0.0, 0.0, 0.0, 0.0);
        other4 = vec4(0.0, 0.0, 0.0, 0.0);

        if(length(normal.xyz) < 0.001 || length(normal.xyz) >= 1.5)
        {
                return;
        }

        normal = normal - 0.5;
        normal.w = 0.0;
        normal = normalize(normal);

        position = (position - 0.5) * 100000.0;

        vec4 result = AmbientColor * AmbientIntensity * image;

        for(int i = 0; i < LIGHT_SOURCES_COUNT; i++)
        {
                if(Lights[i].On == 1)
                {
                        if(Lights[i].Type == 0)
                        {
                                float fDiffuseIntensity = max(0.0, dot(normalize(normal.xyz), -Lights[i].DirectionalLightDirection.xyz));
                                result += image * Lights[i].LightColor * fDiffuseIntensity;
                        }else if(Lights[i].Type == 1)
                        {
                                vec3 vPosToLight = position.xyz - Lights[i].PointLightPosition;
                                float distance = length(vPosToLight);
                                vPosToLight = normalize(vPosToLight);

                                float fDiffuse = max(0.0, dot(normalize(normal.xyz), -vPosToLight));
                   
                                float fAttTotal = Lights[i].PointLightConstantAtt + 
                                Lights[i].PointLightLinearAtt*distance + 
                                Lights[i].PointLightExpAtt*distance*distance;

                                result += (image * Lights[i].LightColor * fDiffuse) / fAttTotal;
                        }else if(Lights[i].Type == 2)
                        {
                                vec4 vSpec = vec4(0.0, 0.0, 0.0, 0.0);
                                vec3 vReflectedVector = normalize(reflect(Lights[i].DirectionalLightDirection.xyz, normal.xyz));
                                vec3 vVertexToEyeVector = normalize(CameraPosition-position.xyz);
                                float fSpecularFactor = dot(vVertexToEyeVector, vReflectedVector);

                                if(fSpecularFactor > 0)
                                {
                                        fSpecularFactor = pow(fSpecularFactor, 4.5);
                                        vSpec = vec4(Lights[i].LightColor.rgb, 1.0) * (specular.r+specular.g+specular.b) * fSpecularFactor;
                                }

                                float distance = distance(position.xyz, Lights[i].PointLightPosition);

                                vec3 dir = position.xyz - Lights[i].PointLightPosition;
                                dir = normalize(dir);

                                float cosine = dot(normalize(Lights[i].DirectionalLightDirection), dir);
                                float dif = 1.0 - Lights[i].SpotLightConeCosine;
                                float factor = clamp((cosine-Lights[i].SpotLightConeCosine)/dif, 0.0, 1.0);

                                float fDiffuseIntensity = max(0.0, dot(normalize(normal.xyz), -Lights[i].DirectionalLightDirection.xyz));

                                vec4 light_color = vec4(0, 0, 0, 0);

                                if(cosine > Lights[i].SpotLightConeCosine)
                                        light_color = ((Lights[i].LightColor + vSpec)*factor) / 
                                        max(distance*Lights[i].PointLightLinearAtt, 1.0);

                                result += light_color * image;
                        }
                }
        }

        float cam_distance = distance(CameraPosition, position.xyz);
        float fogfactor = exp2(-DistanceFogIntensity * DistanceFogIntensity * cam_distance * cam_distance * LOG2);
        fogfactor = clamp(fogfactor, 0.0, 1.0);

        resulting_color = mix(DistanceFogColor, result, fogfactor);
}