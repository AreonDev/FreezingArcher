#version 410

//Input format
//####################################################
layout(location = 0) in vec4 hpos; // Position (Clip space)
layout(location = 1) in vec2 texcoord; // texture coordinate
layout(location = 2) in vec3 vpos; // Position (View Space)
layout(location = 3) in vec3 normal; // surface normal (view space)
layout(location = 4) in vec3 tangent; // tangent vector (view space)
layout(location = 5) in vec3 binormal; // binormal vector (view space)
layout(location = 6) in vec3 view_position;
//####################################################

layout(location = 1) out vec4 normal_color;
layout(location = 0) out vec4 diffuse_color;
layout(location = 2) out vec4 specular_color;
layout(location = 3) out vec4 depth_color;

uniform sampler2D NormalTexture;
uniform sampler2D ColorTexture;

uniform float Tile;
uniform vec4 DiffuseColor;
uniform vec4 SpecularColor;
uniform vec2 PlaneInformation;

uniform int EnableLighting;

vec4 float_to_color(float f)
{
        vec3 color;
        f *= 256;
        color.x = floor(f);
        f = (f-color.x);// * 256;
        color.y = floor(f);
        color.z = f-color.y;
        color.xyz *= 0.00390625; // *= 1.0 / 256
        return vec4(color, 1.0);
        //return vec4(f, f, f, 1.0);
}

void main()
{
        /*
        vec2 texcrd = texcoord*Tile;

        vec3 normalcol = texture2D(NormalTexture, texcrd).xyz;
        vec3 color = texture2D(ColorTexture, texcrd).xyz;

        //transform normal to view space
        normalcol -= 0.5;
        normalcol = normalize(normalcol.x * tangent + normalcol.y*binormal + 
               normalcol.z * normal);

        //convert normal back to [0, 1] color space
        normalcol = normalcol*0.5 +0.5;

        //fill G-Buffer
        normal_color = vec4(normalcol, 1);
        diffuse_color = vec4(color*DiffuseColor.xyz, 1);
        specular_color = SpecularColor;

        float d = (gl_FragCoord.z - PlaneInformation.x) / (PlaneInformation.y);
        depth_color = vec4(-vpos.z, -vpos.z, -vpos.z, 1);*/

        //#######################################################################
        if(EnableLighting == 1)
        {
        float invRadius = 0.0001;
        vec4 vAmbient = vec4(0.02, 0.02, 0.02, 1.0);
        float shininess = 1.0;

        float distSqr = dot(vpos, vpos);
        float att = clamp(1.0 - invRadius * sqrt(distSqr), 0.0, 1.0);
        vec3 lvec = vpos * inversesqrt(distSqr);

        vec3 vVec = normalize(hpos.xyz);

        vec4 base = texture2D(ColorTexture, texcoord);

        vec3 bump = normalize(texture2D(NormalTexture, texcoord).xyz * 2.0 - 1.0);

        float diffuse = max(dot(lvec, bump) , 0.0);

        vec4 vDiffuse = DiffuseColor * diffuse * (1.0 / (gl_FragCoord.z / gl_FragCoord.w) * 0.2);

        float specular = pow(clamp(dot(reflect(-lvec, bump), vVec), 0.0, 1.0), shininess);

        vec4 vSpecular = SpecularColor * specular * 0.2 * (1.0 / (gl_FragCoord.z / gl_FragCoord.w) * 2.5);

        diffuse_color = (vAmbient*base + vDiffuse*base + vSpecular) * att;
        }else
                diffuse_color = vec4(texture2D(ColorTexture, texcoord).xyz*DiffuseColor.xyz * 0.3, 1);
}
