#version 410

//Input format
//####################################################
layout(location = 0) in vec4 hpos; // Position 
layout(location = 1) in vec2 texcoord; // texture coordinate
layout(location = 2) in vec4 vpos; // Position (View Space)
layout(location = 3) in vec3 normal; // surface normal (view space)
layout(location = 4) in vec3 tangent; // tangent vector (view space)
layout(location = 5) in vec3 binormal; // binormal vector (view space)
layout(location = 6) in vec4 view_position;
//####################################################

layout(location = 0) out vec4 FragColor;
layout(location = 3) out vec4 normal_color;
layout(location = 1) out vec4 diffuse_color;
layout(location = 4) out vec4 specular_color;
layout(location = 2) out vec4 position_color;

uniform sampler2D NormalTexture;
uniform sampler2D ColorTexture;

uniform float Tile;
uniform vec4 DiffuseColor;
uniform vec4 SpecularColor;

uniform int EnableLighting;

uniform vec3 EyePosition;

vec4 float_to_color(float f)
{
        vec3 color;
        f *= 256;
        color.x = floor(f);
        f = (f-color.x);// * 256;
        color.y = floor(f);
        color.z = f-color.y;
        color.xyz *= 0.00390625; // *= 1.0 / 256
        return vec4(color, 1.0);
        //return vec4(f, f, f, 1.0);
}

void main()
{
        FragColor = vec4(0.0, 0.0, 0.0, 1.0);

        vec2 texcrd = texcoord*Tile;

        vec3 normalcol = texture2D(NormalTexture, texcrd).xyz;
        vec3 color = texture2D(ColorTexture, texcrd).xyz;

        //transform normal to view space
        normalcol -= 0.5;
        normalcol = normalize(normalcol.x * tangent + normalcol.y*binormal + 
               normalcol.z * normal);

        //convert normal back to [0, 1] color space
        normalcol = normalcol*0.5 +0.5;

        //fill G-Buffer
        if(EnableLighting != 1)
                normal_color = vec4(0, 0, 0, 0);
        else
                normal_color = vec4(normalcol, 1);

        diffuse_color = vec4(color*DiffuseColor.xyz, 1);
        specular_color = SpecularColor;

        position_color = vec4(vpos.xyz * (1.0 / 100000.0) + 0.5, 1.0);
}
