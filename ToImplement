* TODO [#B] ICamera implementation [Paul]
  * First Person Camera
  * Third Person Camera
  * Spectator Camera
* TODO [#B] ICameraManager implementation [Paul]
  * Camera manager may be used from Freezing Archer
* DONE [#C] IEntity implementation [Martin]
  * BaseEntity class
  * PhysicalEntity class derived from BaseEntity
* TODO [#B] IGame implementation [Paul]
  * Manage game - have a look at FreezingArcherGame in FreezingArcher/Game
* TODO [#B] IGameManager implementation [Paul]
  * Manage IGraphicsResource/IResource handling (ResourceManager)
* TODO [#C] ILevel implementation (should it be IScene?) [?]
  * implement draw logic
* TODO [#C] ILevelManager [?]
  * simple manager of ILevel
* DONE [#A] IResourceManager (should it be done by the renderer?) [Paul]
  * wrapper around IInputManager, ITextureManager and IModelManager
* DONE [#C] IInputManager implementation (and design?) [?]
  * does the input manager manage enough?
  * input will be pushed in from renderer/window
* TODO [#C] Input enum - do we really need this? [?]
  * if we need it someone should add all necessary keys in a sensful order :D
  * maybe use unicode-utf8 instead (?)
* DONE [#B] Design a map interface - the currently used one is way too simple [Fin]
  * this should be done in the near future
* DONE [#A] IMaterial implementation [Paul]
  * should be trivial
* DONE [#A] IModel implementation [Fin]
  * nearly done - vao/vbo/shader integration missing
* DONE [#A] IModelManager implementation [Fin]
  * integrate assimp and implement load functions
  * load from xml missing as we do net have a xml format
* DONE [#B] IFramebuffer implementation [Fin]
  * for now we just use direct opengl API via Pencil.Gaming
    later on we should use the IRenderer to implement this
  * implementation may be used from FreezingArcher
* DONE [#B] IScopedFramebuffer implementation [Fin]
  * implementation may be used from FreezingArcher
* DONE [#A] IShaderProgram [Fin]
  * for now we just use direct opengl API via Pencil.Gaming
    later on we should use the IRenderer to implement this
  * implementation may be used from FreezingArcher
* DONE [#A] ITexture implementation [Fin]
  * should abstract the gl 2D texture and 3D texture
    * use a 3D texture when detph is greater than 1
* DONE [#A] ITextureManager implementation [Paul]
  * implement load methods
    * xml load may be added later on
* TODO [#A] Design IRenderer and implement it [David]
  * David is working on it
  * deffered shading/lightning, compositor
* TODO [#C] Particle system [Martin]
  * particle system with realtime lightning
* TODO [#C] Lightning compositor/system [Martin]
  * normal mapper
  * parallax mapper
  * specular mapper
  * diffuse light mapper
* TODO [#C] Shadows [Martin]
  * shadow compositor

* NOTE:
  You may use the generel IManager implementation from AssimpModelManager.cs
  You may use System.Linq for manager implementation
